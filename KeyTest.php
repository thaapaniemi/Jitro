<?php
require 'jitro.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-07 at 06:41:41.
 */
class KeyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Key
     */
    #protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        #$this->object = new Key("aa",);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Key::CheckacceptedValues
     */
    public function testCheckacceptedValues()
    {
        $_GET = array();
        $_POST = array();

        $ok = array("a","b",1);
        $err = array("aa","sfeg",5);

        $keyGET = new Key("aa", $ok, "GET");
        $keyPOST = new Key("aa", $ok, "POST");

        $keyAllGET = new Key("aa", array("ALL"), "GET");
        $keyAllPOST = new Key("aa", array("ALL"), "POST");

        $this->assertFalse($keyGET->CheckacceptedValues());
        $this->assertFalse($keyPOST->CheckacceptedValues());

        foreach ($ok as $key => $value) {
            $_GET['aa'] = $value;
            $_POST = array();

            $this->assertTrue($keyGET->CheckacceptedValues());
            $this->assertFalse($keyPOST->CheckacceptedValues());

            $this->assertTrue($keyAllGET->CheckacceptedValues());

            $this->assertFalse($keyAllPOST->CheckacceptedValues());

            $_GET = array();
            $_POST['aa'] = $value;

            $this->assertFalse($keyGET->CheckacceptedValues());
            $this->assertTrue($keyPOST->CheckacceptedValues());

            $this->assertFalse($keyAllGET->CheckacceptedValues());
            $this->assertTrue($keyAllPOST->CheckacceptedValues());
        }

        foreach ($err as $key => $value) {
            $_GET['aa'] = $value;
            $_POST = array();

            $this->assertFalse($keyGET->CheckacceptedValues());
            $this->assertFalse($keyPOST->CheckacceptedValues());

            $this->assertTrue($keyAllGET->CheckacceptedValues());
            $this->assertFalse($keyAllPOST->CheckacceptedValues());

            $_GET = array();
            $_POST['aa'] = $value;

            $this->assertFalse($keyGET->CheckacceptedValues());
            $this->assertFalse($keyPOST->CheckacceptedValues());

            $this->assertFalse($keyAllGET->CheckacceptedValues());
            $this->assertTrue($keyAllPOST->CheckacceptedValues());
        }

    }

    /**
     * @covers Key::__toString
     */
    public function test__toString()
    {
        $key = new Key("aa","ALL","GET");

        $this->assertEquals($key, 'aa');
    }

    /**
     * @covers Key::Value
     */
    public function testValue()
    {
        $_GET['aa'] = 'x';
        $_POST['bb'] = 'y';

        $keyGET  = new Key("aa", array("aa"), "GET");
        $keyPOST = new Key("bb", array("aa"), "POST");

        $this->assertEquals($keyGET->Value(), 'x');
        $this->assertEquals($keyPOST->Value(), 'y');
    }
}
